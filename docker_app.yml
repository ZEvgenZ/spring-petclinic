---
- hosts: APP_VM
  #connection: local
  #remote_user: ec2-user
  become: yes
  #become_method: sudo
  #vars:
    # app_user: '{{ APP_USER }}'
    # app_pass: '{{ APP_PASS }}'
    # app_dir: /home/{{ app_user }}
    # db_user: '{{ DB_USER }}'
    # db_pass: '{{ DB_PASS }}'
    #####db_host: '{{ DB_HOST }}'
    # db_host: 10.0.10.100
    # db_port: '{{ DB_PORT }}'
    # db_name: '{{ DB_NAME }}'    
    #download_url: http://download.oracle.com/otn-pub/java/jdk/10.0.1+10/fb4372174a714e6b8c52526dc134031e/jdk-10.0.1_linux-x64_bin.rpm
    #download_folder: ~/JDK
    #java_name: "{{download_folder}}/jdk-10.0.1_linux-x64_bin.rpm"
    #java_archive: "{{download_folder}}/jdk-10.0.1_linux-x64_bin.rpm"
    #project_dir: ~/PROJECT_DIR
    #app_host_app: 10.0.10.200

  tasks:
    - name: Update yum
      yum:
        name: '*'
        state: latest
        update_cache: yes
        
    - name: Install packages
      yum:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - wget
        - git
        - docker 
        - python-pip
        
    - name: pip 
      shell: pip install docker-compose
      state: present

    - name: add user to docker 
      shell: gpasswd -a ec2-user docker 
      state: present

    - name: Restart docker
      service:
        name: docker
        state: restarted

    - name: service copy
      copy:
        src: docker-compose@.service
        dest: /etc/systemd/system/docker-compose@.service
        mode: 0600 

    - name: copy
      copy:
        src: docker-compose.yml
        dest: /home/ec2-user/docker-compose.yml
        owner: ec2-user
        mode: 0600 

    - name: restart systemd 
      shell: systemctl daemon-reload && systemctl enable docker-compose@myservice
      
    - name: Start Compose
      service:
        name: docker-compose@myservice
        state: started    
    
   
    #################################################
    # - name: appuser  
    #   debug: msg='{{ app_user }}'
    
    # - name: app_dir
    #   debug: msg='{{ app_dir }}'

    # - name: app_pass  
    #   debug: msg='{{ app_pass }}'

    # - name: item  
    #   debug: msg='{{ item }}'
#####################################################

    - name: Get my public IP from ipify.org
      ipify_facts:

    - name: URL to the web aplication
      debug: msg='{{ ipify_public_ip }}'

    
    
    - name: Wait for the application to start
      wait_for:
        timeout: 310
        host: "{{ ipify_public_ip }}"
        port: 8080

    - name: Application healthcheck
      uri:
        url: "http://{{ ipify_public_ip }}:8080/manage/health"
      return_content: yes
      register: health

    - name: Ð¡heck if the application is running
      debug: msg='The application is running'
      when: health.json.status == "UP"         
   